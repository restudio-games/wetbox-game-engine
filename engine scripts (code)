<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>wetbox game engine</title>
  <style>
    html, body {
      margin: 0; padding: 0;
      width: 100%; height: 100%;
      overflow: hidden;
      font-family: "Segoe UI", sans-serif;
    }
    canvas {
      width: 100%;
      height: 100%;
      touch-action: none;
      display: block;
    }
    #controls {
      position: absolute;
      top: 20px;
      left: 20px;
      display: flex;
      flex-direction: column;
      gap: 12px;
      z-index: 999;
    }
    .control-btn {
      background: linear-gradient(135deg, #7b4aff, #4b00b5); /* بنفسجي تدرج */
      color: white;
      border: none;
      padding: 14px;
      border-radius: 12px;
      font-size: 16px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 48px;
      height: 48px;
      box-shadow: none;
      transition: none;
      transform: none;
    }
    .control-btn:hover,
    .control-btn:active,
    .control-btn:focus {
      background: linear-gradient(135deg, #7b4aff, #4b00b5);
      box-shadow: none;
      transform: none;
      outline: none;
    }
    .control-btn i {
      font-size: 20px;
    }

    /* انيميشن ظهور واختفاء محرر السكربت */
    #editorContainer {
      position: absolute;
      top: 0;
      right: 0;
      width: 50%;
      height: 100%;
      display: flex; /* flex بدل block */
      flex-direction: row; /* صف أفقي */
      align-items: stretch;
      z-index: 998;
      background-color: #1e1e1e;

      /* الحالة الابتدائية مخفية */
      transform: translateX(100%);
      opacity: 0;
      transition: transform 0.4s ease, opacity 0.4s ease;
      pointer-events: none; /* تمنع التفاعل لما مخفية */
    }
    #editorContainer.visible {
      transform: translateX(0);
      opacity: 1;
      pointer-events: auto; /* تسمح بالتفاعل لما ظاهرة */
    }

    #runButton {
      background: linear-gradient(to right, #7b4aff, #4b00b5); /* بنفسجي تدرج */
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: 12px;
      cursor: pointer;
      font-size: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
      box-shadow: none;
      transition: none;
      transform: none;

      /* حجم وزاوية */
      width: 90px;
      margin: 10px;
      white-space: nowrap;
      flex-shrink: 0;
      user-select: none;
      justify-content: center;
    }
    #runButton:hover,
    #runButton:active,
    #runButton:focus {
      background: linear-gradient(to right, #7b4aff, #4b00b5);
      box-shadow: none;
      transform: none;
      outline: none;
    }
    #runButton i {
      font-size: 16px;
    }

    #editor {
      flex-grow: 1;
      height: 100%;
      margin: 10px 10px 10px 0;
    }
  </style>

  <!-- Babylon.js -->
  <script src="https://cdn.babylonjs.com/babylon.js"></script>
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <!-- Monaco Editor -->
  <script src="https://unpkg.com/monaco-editor@0.44.0/min/vs/loader.js"></script>
</head>
<body>
  <div id="controls">
    <button class="control-btn" onclick="activateGizmo('move')"><i class="fa-solid fa-up-down-left-right"></i></button>
    <button class="control-btn" onclick="activateGizmo('rotate')"><i class="fa-solid fa-rotate-right"></i></button>
    <button class="control-btn" onclick="activateGizmo('scale')"><i class="fa-solid fa-expand"></i></button>
    <button class="control-btn" onclick="toggleEditor()"><i class="fa-solid fa-code"></i></button>
  </div>

  <canvas id="renderCanvas"></canvas>
  <div id="editorContainer">
    <button id="runButton" onclick="runEditorCode()"><i class="fa-solid fa-play"></i> Run</button>
    <div id="editor"></div>
  </div>

  <script>
    const canvas = document.getElementById("renderCanvas");
    const engine = new BABYLON.Engine(canvas, true);
    let gizmoManager, box;

    const createScene = function () {
      const scene = new BABYLON.Scene(engine);

      const camera = new BABYLON.ArcRotateCamera("camera", Math.PI / 2, Math.PI / 4, 8, BABYLON.Vector3.Zero(), scene);
      camera.attachControl(canvas, true);
      const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);

      BABYLON.MeshBuilder.CreateGround("ground", { width: 6, height: 6 }, scene);

      box = BABYLON.MeshBuilder.CreateBox("box", { size: 1.5 }, scene);
      box.position.y = 1;
      box.setPivotPoint(BABYLON.Vector3.Zero());

      const mat = new BABYLON.StandardMaterial("mat", scene);
      mat.diffuseColor = new BABYLON.Color3(0.3, 0.6, 0.9);
      box.material = mat;

      gizmoManager = new BABYLON.GizmoManager(scene);
      gizmoManager.attachableMeshes = [box];
      gizmoManager.usePointerToAttachGizmos = false;

      return scene;
    };

    function activateGizmo(mode) {
      if (!gizmoManager || !box) return;

      gizmoManager.positionGizmoEnabled = false;
      gizmoManager.rotationGizmoEnabled = false;
      gizmoManager.scaleGizmoEnabled = false;

      if (mode === "move") {
        gizmoManager.positionGizmoEnabled = true;
      } else if (mode === "rotate") {
        gizmoManager.rotationGizmoEnabled = true;

        const rotGizmo = gizmoManager.gizmos.rotationGizmo;
        rotGizmo.updateGizmoRotationToMatchAttachedMesh = true;
        rotGizmo.snapDistance = BABYLON.Tools.ToRadians(15);
      } else if (mode === "scale") {
        gizmoManager.scaleGizmoEnabled = true;
      }

      gizmoManager.attachToMesh(box);
    }

    function toggleEditor() {
      const editorContainer = document.getElementById("editorContainer");
      if (!editorContainer.classList.contains("visible")) {
        editorContainer.classList.add("visible");

        if (!window.monacoEditor) {
          require.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@0.44.0/min/vs' } });
          window.MonacoEnvironment = {
            getWorkerUrl: function (workerId, label) {
              return `data:text/javascript;charset=utf-8,` +
                encodeURIComponent(`
                  self.MonacoEnvironment = {
                    baseUrl: 'https://unpkg.com/monaco-editor@0.44.0/min/'
                  };
                  importScripts('https://unpkg.com/monaco-editor@0.44.0/min/vs/base/worker/workerMain.js');
                `);
            }
          };
          require(["vs/editor/editor.main"], function () {
            window.monacoEditor = monaco.editor.create(document.getElementById("editor"), {
              value: "// Write your JavaScript here\nconsole.log('Hello from editor!');",
              language: "javascript",
              theme: "vs-dark",
              automaticLayout: true
            });
          });
        }
      } else {
        editorContainer.classList.remove("visible");
      }
    }

    function runEditorCode() {
      if (window.monacoEditor) {
        try {
          const code = window.monacoEditor.getValue();
          eval(code);
        } catch (err) {
          console.error("Error running code:", err);
        }
      }
    }

    const scene = createScene();
    engine.runRenderLoop(() => scene.render());
    window.addEventListener("resize", () => engine.resize());
  </script>
</body>
</html>
